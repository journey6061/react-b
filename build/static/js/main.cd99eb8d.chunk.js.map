{"version":3,"sources":["component/layout/layout.js","component/burger/burgeringra/burgeringra.js","component/burger/burger.js","component/burger/burgercontrols/burgercontrol/burgercontrol.js","component/burger/burgercontrols/burgercontrols.js","container/burgerbuilder/burgerbuilder.js","App.js","serviceWorker.js","index.js","component/layout/layout.module.css"],"names":["layout","props","className","classes","main","children","burgeringra","ingra","this","type","Component","propType","PropType","string","isRequired","burger","emptyinfo","countingradience","Object","keys","map","aa","Array","bb","index","key","reduce","sec","concat","console","log","length","burgercontrol","name","onClick","add","remove","ingrad","burgercontrols","price","ing","addmethod","removemethod","custom1","custom2","custom3","burgerbuilder","state","ingradience","baseprice","addingradient","tt","added","updateingrad","newprice","setState","removeingradient","kk","removeingrad","removeamount","newcustomised","newamount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cd99eb8d.chunk.js","sourcesContent":["import React,{Fragment} from 'react';\nimport Aux from '../../hoc/aux';\nimport classes from './layout.module.css';\n\nconst layout =(props)=>(\n    <>\n    <div>menu, sidedraw, backdrop</div>\n    <main className={classes.main}>\n        {props.children}\n    </main>\n    </>\n\n)\n\nexport default layout;","import React,{Component} from 'react';\nimport PropType from 'prop-types'\n\nclass burgeringra extends Component{\n    render(){\n        let ingra=null;\n        switch(this.props.type){\n            case('test1'):\n                ingra=<div>test1</div>\n                break;\n            case('custom1'):\n                ingra=<div>custom1</div>\n                break;\n            case('custom2'):\n                ingra=<div>custom2</div>\n                break;\n            case('custom3'):\n                ingra=<div>custom3</div>\n                break;\n            case('test2'):\n                ingra=<div>test2</div>\n                break;\n            \n            default:\n                ingra=null;\n\n            \n        }\n        return ingra;\n    }\n}\n\n\nburgeringra.propType={\n    type:PropType.string.isRequired\n}\n\nexport default burgeringra;","import React,{Component} from 'react';\nimport Burgeringra from './burgeringra/burgeringra';\n\n/* class burger extends Component{\n    render(){\n        return(\n            <div>\n            <Burgeringra type=\"test1\"/>\n            <Burgeringra type=\"custom1\"/> \n            <Burgeringra type=\"custom2\"/> \n            <Burgeringra type=\"custom3\"/> \n            <Burgeringra type=\"test2\"/>\n                  \n            </div>\n        );\n    }\n\n} */\n\nconst burger=(props)=>{\n    let emptyinfo=null;\n    const countingradience=Object.keys(props.ingra)\n    .map(aa=>\n        \n         [...Array(props.ingra[aa])]\n    .map((bb, index)=>{\n            return <Burgeringra key={aa+index+bb} type={aa}/>;\n        }\n    ) \n    )\n    /*把Array的三个数组合并*/\n    .reduce((aa,sec)=>{\n        return aa.concat(sec)\n    })\n    console.log(countingradience);\n    if(countingradience.length===0){\n        emptyinfo=<p>please input ingradient</p>\n    }\n    /* {\n        for(let i=0; i<props.ingra[aa];i++){\n            customfood+=<Burgeringra key={aa+i} type={aa}/>;\n        }\n        \n    } */\n\n    /*数组方法\n    let customfood=[];\n    const countingradience=Object.keys(props.ingra);\n\n    for (let j=0; j<countingradience.length; j++){\n        for(let i=0; i<props.ingra[countingradience[j]];i++){\n            customfood.push(<Burgeringra key={countingradience[j]+i} type={countingradience[j]}/>);\n\n        }\n    }\n    console.log(customfood);\n    */\n    \n\n    \n        \n    return (\n        <div>\n        <Burgeringra type='test1'/>\n        {/* <Burgeringra type={props.ingradience.custom1}/> \n        <Burgeringra type={props.ingradience.custom2}/> \n        <Burgeringra type={props.ingradience.custom3}/>  */}\n        {/* 数组方法component\n        {customfood} */}\n\n        {countingradience}\n        {emptyinfo}\n        \n        <Burgeringra type='test2'/>\n        </div>\n    )\n    /* (ingra,index)=>{\n    ingra.map(\n\n    )\n} */\n    \n};\n\nexport default burger;","import React from 'react';\n\nconst burgercontrol =(props)=>{\n    return(\n        <div>\n            <span>{props.name}</span>\n            <span onClick={props.add}> more</span>\n            <span onClick={props.remove}> less</span>\n        </div>\n    )\n\n}\n\nexport default burgercontrol;","import React from 'react';\nimport Burgercontrol from './burgercontrol/burgercontrol'\n\nconst ingrad=[\n    {name: 'custom1', type: 'custom1'},\n    {name: 'custom2', type: 'custom2'},\n    {name: 'custom3', type: 'custom3'}\n]\n\nconst burgercontrols =(props)=>(\n    <div>\n        <p>total price: {props.price}</p>\n       {ingrad.map((ing)=>{\n           return <Burgercontrol \n           key={ing.name} \n           name={ing.name}\n           add={()=>props.addmethod(ing.type)}\n           remove={()=>props.removemethod(ing.type)}\n           />\n       })}\n    </div>\n)\n\nexport default burgercontrols;","import React, {Component} from 'react';\n//import classes from 'burgerbuilder.css'; \nimport Burger from '../../component/burger/burger';\nimport Burgercontrols from '../../component/burger/burgercontrols/burgercontrols';\nimport Price from '../../component/burger/price'\n\nconst price={\n    custom1:0.4,\n    custom2:1.5,\n    custom3:0.7\n}\n\nclass burgerbuilder extends Component {\n    state={\n        ingradience:{\n            custom1:0,\n            custom2:0,\n            custom3:0,\n        },\n        baseprice:4\n    }\n\n    \n\n    addingradient=(tt)=>{\n        let chooseingra=this.state.ingradience[tt];\n        let added=chooseingra+1;\n        let updateingrad={...this.state.ingradience};\n        updateingrad[tt]=added;\n\n        let countprice=price[tt];\n        let addedprice=this.state.baseprice;\n        let newprice=countprice+addedprice;\n\n        this.setState({ingradience:updateingrad, baseprice:newprice});\n    }\n\n    removeingradient=(kk)=>{\n        const removeingrad=this.state.ingradience[kk];\n        if(removeingrad>0){\n        const removeamount=removeingrad-1;\n        const newcustomised={...this.state.ingradience};\n        newcustomised[kk]=removeamount;\n\n        const baseprice=this.state.baseprice;\n        const singleingrad=price[kk];\n        const newamount=baseprice-singleingrad;\n\n        this.setState({ingradience:newcustomised, baseprice:newamount});\n            }\n        }\n\n    render(){\n        return(\n            <>\n{/*             <Price customprice={this.state.baseprice} />\n */}            <Burger ingra={this.state.ingradience}/>\n            <Burgercontrols \n            addmethod={this.addingradient}\n            removemethod={this.removeingradient}\n            price={this.state.baseprice}\n            />\n            </>\n        );\n    }\n}\n\nexport default burgerbuilder;","import React, {Component} from 'react';\n//import './App.css';\nimport Layout from './component/layout/layout';\nimport Burgerbuilder from './container/burgerbuilder/burgerbuilder'\n\nclass App extends Component {\n  state={\n\n  }\n  render(){\n      return(\n        <>\n        <Layout>\n          <Burgerbuilder />\n        </Layout>\n          <div className=\"App\">\n            \n          </div>\n          </>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"layout_main__2OgzO\"};"],"sourceRoot":""}